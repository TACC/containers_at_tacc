==========================
Introduction to Containers
==========================

Containers are an important common currency for app development, web services,
scientific computing, and more. Containers allow you to package an application
along with all of its dependencies, isolate it from other applications and
services, and deploy it consistently and reproducibly and *platform-agnostically*.
In this introductory module, we will learn about containers and their uses, in
particular the containerization platform **Docker**.

What is a Container?
--------------------

* A container is a standard unit of software that packages up code and all its
  dependencies so the application runs quickly and reliably from one computing
  environment to another.
* Containers allow a developer to package up an application with all of the
  parts it needs, such as libraries and other dependencies, and ship it all out
  as one package.
* Multiple containers can run on the same machine and share the OS kernel with
  other containers, each running as isolated processes in user space, hence are
  *lightweight* and have *low overhead*.
* Containers ensure *portability* and *reproducibility* by isolating the
  application from environment.




How is a Container Different from a VM?
---------------------------------------

Virtual machines enable application and resource isolation, run on top of a
hypervisor (high overhead). Multiple VMs can run on the same physical
infrastructure - from a few to dozens depending on resources. VMs take up more
disk space and have long start up times (~minutes).

.. figure:: images/arch_vm.png
   :width: 400
   :align: center

   Applications isolated by VMs.

Containers enable application and resource isolation, run on top of the host
operating system. Many containers can run on the same physical infrastructure -
up to 1,000s depending on resources. Containers take up less disk space than VMs
and have very short start up times (~100s of ms).

.. figure:: images/arch_container.png
   :width: 400
   :align: center

   Applications isolated by containers.



**Benefits of using containers include:**

* Platform independence: Build it once, run it anywhere
* Resource efficiency and density
* Enables reproducible science
* Effective isolation and resource sharing



Container Technologies
----------------------

Docker
~~~~~~

.. figure:: images/docker_logo.jpg
   :height: 180
   :width: 200
   :align: right
   :alt: Docker Logo
   :figclass: left

Docker is a containerization platform that uses OS-level virtualization to
package software and dependencies in deliverable units called containers. It is
by far the most common containerization platform today, and most other container
platforms are compatible with Docker. (E.g. Singularity and Shifter are two
containerization platforms you'll find in HPC environments).



Singularity (now Apptainer)
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Singularity (recently renamed as Apptainer) is a container solution which provides
the functionality of a virtual machine, without the heavyweight implementation and
performance costs of emulation and redundancy. Software developers can now build
their stack onto whatever operating system base fits their needs best, and create
distributable runtime encapsulated environments and the users never have to worry
about dependencies, requirements, or anything else from the user space.


In general we use **Docker** to develop new containers and run them on our laptops.
We use **Singularity (Apptainer)** as a runtime on our HPC systems.
We can find existing containers that are compatible with both Docker and Singularity
(Apptainer) platforms (among others) at:

1. `Docker Hub <https://hub.docker.com/>`_
2. `Quay.io <https://quay.io/>`_
3. `BioContainers <https://biocontainers.pro/#/>`_



Some Quick Definitions
----------------------

Container
~~~~~~~~~

A container is a standard unit of software that packages up code and all its
dependencies so the application runs quickly and reliably from one computing
environment to another. Containers includes everything from the operating
system, user-added files, metadata.

Image
~~~~~

A Docker images is a read-only file used to produce Docker containers. It is
comprised of layers of other images, and any changes made to an image can only
be saved and propagated on by adding new layers. The "base image" is the
bottom-most layer that does not depend on any other layer and typically defines,
e.g., the operating system for the container. Running a Docker image creates an
instance of a Docker container.

Dockerfile
~~~~~~~~~~

The Dockerfile is a recipe for creating a Docker image. They are simple, usually
short plain text files that contain a sequential set of commands (*a recipe*)
for installing and configuring your application and all of its dependencies. The
Docker command line interface is used to "build" an image from a Dockerfile.

Image Registry
~~~~~~~~~~~~~~

The Docker images you build can be stored in online image registries, such as
`Docker Hub <https://hub.docker.com/>`_. (It is similar to the way we store
Git repositories on GitHub.) Image registries support the notion of tags on
images to identify specific versions of images. It is mostly public, and many
"official" images can be found.


Image Tags
~~~~~~~~~~

Docker supports the notion of image tags, similar to tags in a git repository.
Tags identify a specific version of an image. The full name of an image on
Docker Hub is comprised of components separated by slashes. The components include
a “repository” (which could be owned by an individual or organization), the “name”,
and the “tag”. For example, an image with the full name

.. code-block:: text

   tacc/gateways19:0.1

would refer to the gateways19 image within the “tacc” registry and have a
tag of “0.1”.

Summing Up
----------

If you are developing an app or web service, you will almost certainly want to
work with containers. First you must either **build** an image from a
Dockerfile, or **pull** an image from a public registry. Then, you **run** (or
deploy) an instance of your image into a container. The container represents
your app or web service, running in the wild, isolated from other apps and
services.

.. figure:: images/docker_workflow.png
   :width: 600
   :align: center

   Simple Docker workflow.




Additional Resources
--------------------

* `Best Practices <https://docs.docker.com/develop/develop-images/dockerfile_best-practices/>`_.
